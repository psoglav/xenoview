import { Ticker } from '../ticker';
import { Pointer, Loader, ChartStyle } from '../components';
import { ChartData, Transform, ChartLayout, UI } from '.';
import '../../public/styles/main.css';
export declare class Chart extends ChartData {
    layout: ChartLayout;
    get chartLayer(): import("./canvas").Canvas;
    get uiLayer(): import("./canvas").Canvas;
    options: Chart.Options;
    ticker: Ticker;
    ui: UI;
    transform: Transform;
    mousePosition: {
        x: number;
        y: number;
    };
    loader: Loader;
    get ctx(): CanvasRenderingContext2D;
    get canvas(): HTMLCanvasElement;
    get container(): HTMLElement;
    get boundingRect(): Chart.BoundingRect;
    set boundingRect(value: Chart.BoundingRect);
    get components(): {
        [x: string]: import("./component").Component;
    };
    get style(): ChartStyle;
    get pointer(): Pointer;
    constructor(container: HTMLElement | string, options?: Chart.Options);
    render(): void;
    loadHistory(value: History.Data): void;
    setTicker(ticker: Ticker): void;
    setStyle(value: Chart.StyleName): void;
    loading(value: boolean): void;
    initUIElements(): void;
    bindEventListeners(): void;
    getWidth(ctx: CanvasRenderingContext2D): number;
    getHeight(ctx: CanvasRenderingContext2D): number;
    get mainCanvasWidth(): number;
    get mainCanvasHeight(): number;
    get canvasRect(): DOMRect;
    toggleAutoScale(): void;
    setSize(w: number, h: number, canvas: HTMLCanvasElement): void;
    rescale(ctx: CanvasRenderingContext2D): void;
    getSharpPixel(pos: number, ctx: CanvasRenderingContext2D, thickness?: number): number;
    getPixelRatio(context: any): number;
    moveTo(x: number, y: number, ctx?: CanvasRenderingContext2D): void;
    lineTo(x: number, y: number, ctx?: CanvasRenderingContext2D): void;
    rect(x: number, y: number, w: number, h: number, ctx?: CanvasRenderingContext2D): void;
    circle(x: number, y: number, radius: number, ctx?: CanvasRenderingContext2D): void;
    clear(ctx?: CanvasRenderingContext2D): void;
    error(msg: string): void;
    log(...msg: any): void;
    debug(text: any, x: number, y: number): void;
}
