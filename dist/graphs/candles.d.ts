import { TLinearGraphOptions, TCandlesHistory } from '../types';
import Graph from './base';
export declare class CandlesGraph extends Graph {
    private CHART_GREEN_CANDLE_COLOR;
    private CHART_RED_CANDLE_COLOR;
    private GRAPH_LEFT;
    private GRAPH_RIGHT;
    private GRAPH_TOP;
    private GRAPH_BOTTOM;
    private pointerYPosIndex;
    private pointerIsVisible;
    private panningIsActive;
    private candlesSpace;
    private yZoomFactor;
    private isZoomingYAxis;
    private isZoomingXAxis;
    private mousePosition;
    private history;
    private graphData;
    private visibleData;
    private topHistoryPrice;
    private bottomHistoryPrice;
    constructor(container: HTMLElement | string, data?: TCandlesHistory, opts?: TLinearGraphOptions);
    applyOptions(opts: TLinearGraphOptions): void;
    getTopHistoryPrice(): [number, number];
    getBottomHistoryPrice(): [number, number];
    getStartDataPoint(): any;
    getEndDataPoint(): any;
    get floatingWidth(): number;
    windowMouseMoveHandler(e: MouseEvent): void;
    windowMouseUpHandler(e: MouseEvent): void;
    mouseMoveHandler(e: MouseEvent): void;
    mouseEnterHandler(): void;
    mouseLeaveHandler(): void;
    mouseDownHandler(e: MouseEvent): void;
    mouseUpHandler(e: MouseEvent): void;
    wheelHandler(e: any): void;
    yAxisMouseMoveHandler(e?: MouseEvent): void;
    yAxisMouseDownHandler(e?: MouseEvent): void;
    yAxisMouseUpHandler(e?: MouseEvent): void;
    xAxisMouseDownHandler(e?: MouseEvent): void;
    xAxisMouseUpHandler(e?: MouseEvent): void;
    zoomYAxis(side: number): void;
    zoomGraph(side: number): void;
    moveGraph(movement: number): void;
    clampXPanning(): void;
    filterVisiblePointsAndCache(): any;
    filterVisiblePoints(data: any[]): any[];
    movePointer(): void;
    draw(): void;
    drawPointer(): void;
    drawPricePointer(): void;
    mainDebug(): void;
    drawXAxis(): void;
    drawYAxis(): void;
    drawGraph(): void;
    loadHistory(data: TCandlesHistory): void;
    normalizePoint(point: any): any;
    normalizeData(): {
        close: number;
        high: number;
        low: number;
        open: number;
        time: number;
        volumefrom: number;
        volumeto: number;
    }[];
}
