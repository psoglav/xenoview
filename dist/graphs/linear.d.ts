import { TLinearGraphOptions, TLinearHistory } from '../types';
import Graph from './base';
export declare class LinearGraph extends Graph {
    private CHART_HOVER_STROKE_WIDTH;
    private CHART_CURRENT_STROKE_WIDTH;
    private CHART_STROKE_WIDTH;
    private CHART_STROKE_COLOR;
    private CHART_POINTER_COLOR;
    private CHART_PRICE_SEGMENTS;
    private CHART_GRADIENT;
    private GRAPH_LEFT;
    private GRAPH_RIGHT;
    private pointerYPosIndex;
    private pointerIsVisible;
    private panningIsActive;
    private mousePosition;
    private history;
    private graphData;
    constructor(container: HTMLElement | string, data?: TLinearHistory, opts?: TLinearGraphOptions);
    applyOptions(opts: TLinearGraphOptions): void;
    get visibleGraphData(): number[];
    get graphDataWithPadding(): number[];
    get topHistoryPrice(): number[];
    get bottomHistoryPrice(): number[];
    get floatingWidth(): number;
    normalizeToGraphY(value: number): number;
    windowMouseMoveHandler(e?: MouseEvent | undefined): void;
    windowMouseUpHandler(e?: MouseEvent | undefined): void;
    xAxisMouseDownHandler(e?: MouseEvent | undefined): void;
    xAxisMouseUpHandler(e?: MouseEvent | undefined): void;
    yAxisMouseDownHandler(e?: MouseEvent | undefined): void;
    yAxisMouseMoveHandler(e?: MouseEvent | undefined): void;
    yAxisMouseUpHandler(e?: MouseEvent | undefined): void;
    mouseMoveHandler(e: MouseEvent): void;
    mouseEnterHandler(): void;
    mouseLeaveHandler(): void;
    mouseDownHandler(e: MouseEvent): void;
    mouseUpHandler(e: MouseEvent): void;
    wheelHandler(e: any): void;
    draw(updateGraphData?: boolean): void;
    zoomGraph(side: number): void;
    moveGraph(movement: number): void;
    clampGraph(): void;
    movePointer(): void;
    drawPointer(): void;
    drawGraph(updateGraphData?: boolean): void;
    drawGrid(segments: number): void;
    loadHistory(data: TLinearHistory): void;
    normalizeData(): any[];
}
